name: Go

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.13
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi
    - name: Install Blobfuse
      run: |
        sudo apt-get update --fix-missing
        sudo apt-get install pkg-config cmake libcurl4-gnutls-dev libgnutls28-dev uuid-dev libgcrypt20-dev libboost-all-dev gcc g++ -y
        sudo apt-get install blobfuse
        
    - name: Set up workspace
      run: |
        mkdir mount
        chown -R `whoami` mount
        chmod 777 mount
        sudo mkdir /mnt/blobfusetmp
        sudo chown -R `whoami` /mnt/blobfusetmp
        sudo chmod 777 /mnt/blobfusetmp
        echo "accountName anmodblobwthns" > connection.conf
        echo "accountKey " ${{secrets.ACCOUNT_KEY}} >> connection.conf
        echo "authType Key" >> connection.conf
        echo "containerName test" >> connection.conf
        cat connection.conf
        mkdir anuj
        chown -R `whoami` anuj
        chmod 777 anuj
        
    - name: Run Blobfuse
      run: |
        blobfuse mount --tmp-path=/mnt/blobfusetmp --config-file=connection.conf
        echo "Mounted"
        cd mount 
        ls -l
        
    - name: Upload Test Blobfuse-cpp
      run: |
        cd mount
        ls -l
        STARTTIME=$(date +%s)
        dd if=/dev/zero of=test1.txt  bs=10M  count=1
        ENDTIME=$(date +%s)
        echo "$(($ENDTIME - $STARTTIME)) seconds to upload 10 MB"
        STARTTIME=$(date +%s)
        dd if=/dev/zero of=test2.txt  bs=100M  count=1
        ENDTIME=$(date +%s)
        echo "$(($ENDTIME - $STARTTIME)) seconds to upload 100 MB"
        ls -l
        
    - name: Download Test Blobfuse-Cpp
      run: |
        cd mount
        ls -l
        STARTTIME=$(date +%s)
        cp test1.txt ../anuj
        ENDTIME=$(date +%s)
        echo "$(($ENDTIME - $STARTTIME)) seconds to download 10 MB"
        STARTTIME=$(date +%s)
        cp test2.txt ../anuj
        ENDTIME=$(date +%s)
        echo "$(($ENDTIME - $STARTTIME)) seconds to download 100 MB"
        
    - name: Clean Container
      run: |
        cd mount 
        ls -l
        rm test1.txt test2.txt
        ls -l
        cd ..
        fusermount -u mount
        cd anuj
        rm test1.txt test2.txt
        
    - name: Install and Run Blobfuse-Go
      run: |
        cd main
        go build filesystem.go connection.go dirapis.go fileapis.go
        ./filesystem --mountPath=../mount --accountName=anmodblobwthns --accountKey=${{secrets.ACCOUNT_KEY}} --containerName=test &
        
    - name: Upload Test Blobfuse-Go
      run: |
        cd mount
        ls -l
        STARTTIME=$(date +%s)
        dd if=/dev/zero of=test1.txt  bs=10M  count=1
        ENDTIME=$(date +%s)
        echo "$(($ENDTIME - $STARTTIME)) seconds to upload 10 MB"
        STARTTIME=$(date +%s)
        dd if=/dev/zero of=test2.txt  bs=100M  count=1
        ENDTIME=$(date +%s)
        echo "$(($ENDTIME - $STARTTIME)) seconds to upload 100 MB"
        ls -l
        
    - name: Download Test Blobfuse-Cpp
      run: |
        cd mount
        STARTTIME=$(date +%s)
        cp test1.txt ../anuj
        ENDTIME=$(date +%s)
        echo "$(($ENDTIME - $STARTTIME)) seconds to download 10 MB"
        STARTTIME=$(date +%s)
        cp test2.txt ../anuj
        ENDTIME=$(date +%s)
        echo "$(($ENDTIME - $STARTTIME)) seconds to download 100 MB"
        cd ..
        fusermount -u mount
        
    - name: Clean Container
      run: |
        blobfuse mount --tmp-path=/mnt/blobfusetmp --config-file=connection.conf
        echo "Mounted"
        cd mount 
        ls -l
        rm test1.txt test2.txt
        cd ..
        fusermount -u mount
        cd anuj
        rm test1.txt test2.txt
        
    - name: Upload Test Azcopy
      run: |
        cd testscripts
        dd if=/dev/zero of=test1.txt  bs=10M  count=1
        dd if=/dev/zero of=test2.txt  bs=100M  count=1      
        chmod 777 azcopy
        ./azcopy copy "test1.txt" "https://anmodblobwthns.blob.core.windows.net/test/test1.txt${{secrets.SAS_KEY}}"
        ./azcopy copy "test2.txt" "https://anmodblobwthns.blob.core.windows.net/test/test2.txt${{secrets.SAS_KEY}}"
        
    - name: Download Test Azcopy
      run: |
        cd testscripts
        chmod 777 azcopy
        ./azcopy copy "https://anmodblobwthns.blob.core.windows.net/test/test1.txt${{secrets.SAS_KEY}}" "test1.txt"
        ./azcopy copy "https://anmodblobwthns.blob.core.windows.net/test/test2.txt${{secrets.SAS_KEY}}" "test2.txt"
        rm test1.txt test2.txt
        
    - name: Clean Container
      run: |
        blobfuse mount --tmp-path=/mnt/blobfusetmp --config-file=connection.conf
        echo "Mounted"
        cd mount 
        ls -l
        rm test1.txt test2.txt
        cd ..
        fusermount -u mount
        
        
